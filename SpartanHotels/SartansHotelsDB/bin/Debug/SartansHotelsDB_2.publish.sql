/*
Deployment script for SartansHotelsDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SartansHotelsDB"
:setvar DefaultFilePrefix "SartansHotelsDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.SQL2012\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.SQL2012\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[RoomTypeAvailability].[RoomTypeID] on table [dbo].[RoomTypeAvailability] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[RoomTypeAvailability])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping FK_RoomTypeAvailability_RoomTypeDetails...';


GO
ALTER TABLE [dbo].[RoomTypeAvailability] DROP CONSTRAINT [FK_RoomTypeAvailability_RoomTypeDetails];


GO
PRINT N'Starting rebuilding table [dbo].[RoomTypeAvailability]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_RoomTypeAvailability] (
    [ID]                      INT      NOT NULL,
    [RoomTypeID]              INT      NOT NULL,
    [RoomTypeAccessabilityID] INT      NOT NULL,
    [ForDate]                 DATETIME NOT NULL,
    [NoOfRoomBlocked]         INT      NOT NULL
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[RoomTypeAvailability])
    BEGIN
        
        INSERT INTO [dbo].[tmp_ms_xx_RoomTypeAvailability] ([ID], [RoomTypeAccessabilityID], [ForDate], [NoOfRoomBlocked])
        SELECT [ID],
               [RoomTypeAccessabilityID],
               [ForDate],
               [NoOfRoomBlocked]
        FROM   [dbo].[RoomTypeAvailability];
        
    END

DROP TABLE [dbo].[RoomTypeAvailability];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_RoomTypeAvailability]', N'RoomTypeAvailability';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating FK_RoomTypeAvailability_RoomTypeDetails...';


GO
ALTER TABLE [dbo].[RoomTypeAvailability] WITH NOCHECK
    ADD CONSTRAINT [FK_RoomTypeAvailability_RoomTypeDetails] FOREIGN KEY ([RoomTypeAccessabilityID]) REFERENCES [dbo].[RoomTypeAccessability] ([RoomTypeAccessabilityID]);


GO
PRINT N'Creating FK_RoomTypeAvailability_RoomType...';


GO
ALTER TABLE [dbo].[RoomTypeAvailability] WITH NOCHECK
    ADD CONSTRAINT [FK_RoomTypeAvailability_RoomType] FOREIGN KEY ([RoomTypeID]) REFERENCES [dbo].[RoomTypes] ([RoomTypeID]);


GO
PRINT N'Altering [dbo].[sp_get_Availability]...';


GO
ALTER PROCEDURE [dbo].[sp_get_Availability]
	@BranchID int,
	@FromDate DateTime,
	@ToDate	 DateTime,
	@IncludePartner BIT = 1
AS
	DECLARE @OverLoadPercent INT
	SELECT @OverLoadPercent = ISNULL (c.Value, 0) 
	FROM Configurations c
	Where c.Name = 'OverLoadPercent'

	DECLARE @MinRoomsAvailable TABLE (RoomTypeID INT, RoomsAvailable INT)

	INSERT INTO @MinRoomsAvailable
	SELECT RT.RoomTypeID, MIN((RTA.NoOfRooms + (RTA.NoOfRooms * (@OverLoadPercent * 0.01)))) as RoomsAvailable
	from RoomTypes RT
	Inner Join RoomTypeAccessability RTA
		On  RT.RoomTypeID = RTA.RoomTypeID
	WHERE RT.BranchID = @BranchID
		AND	(RTA.FromDate Between @FromDate and @ToDate 
				OR RTA.ToDate Between @FromDate and @ToDate)
	Group BY RT.RoomTypeID

	DECLARE @MaxRoomsBlocked TABLE (RoomTypeID INT, RoomsBlocked INT)

	INSERT INTO @MaxRoomsBlocked
	SELECT RT.RoomTypeID, MAX(RTA.NoOfRoomBlocked) as RoomsBlocked
	from RoomTypes RT
	Inner Join RoomTypeAvailability RTA
		On  RT.RoomTypeID = RTA.RoomTypeID
	WHERE RT.BranchID = @BranchID
		AND	RTA.ForDate Between @FromDate and @ToDate 
	Group BY RT.RoomTypeID

	Select RT.RoomTypeID, RT.TypeName, RT.Facilities, 0 as ReturnType
	from RoomTypes RT
		Inner Join @MinRoomsAvailable RTA
			On  RT.RoomTypeID = RTA.RoomTypeID
		left Join @MaxRoomsBlocked RTAv
			On RTA.RoomTypeID = RTAv.RoomTypeID
	WHERE RTAv.RoomsBlocked < RTA.RoomsAvailable
		
	UNION

	Select HP.PartnerID, Hp.URL, Hp.Details, 1 as ReturnType
	from HotelPartners HP
	WHERE HP.BranchID = @BranchID
		AND @IncludePartner  = 1
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[RoomTypeAvailability] WITH CHECK CHECK CONSTRAINT [FK_RoomTypeAvailability_RoomTypeDetails];

ALTER TABLE [dbo].[RoomTypeAvailability] WITH CHECK CHECK CONSTRAINT [FK_RoomTypeAvailability_RoomType];


GO
PRINT N'Update complete.'
GO
